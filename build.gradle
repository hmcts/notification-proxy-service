buildscript {
  repositories {
    mavenLocal()
    jcenter()
    maven {
      url 'https://jitpack.io'
    }
  }
  dependencies {
    classpath("net.serenity-bdd:serenity-gradle-plugin:2.5.10")
    classpath("net.serenity-bdd:serenity-single-page-report:2.1.13")
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.15.RELEASE'
  id 'org.springframework.boot' version '2.7.11'
  id 'org.owasp.dependencycheck' version '8.0.2'
  id 'com.github.ben-manes.versions' version '0.38.0'
  id 'org.sonarqube' version '3.3'
  id 'uk.gov.hmcts.java' version '0.12.43'
  id "info.solidsoft.pitest" version '1.9.0'
}

def springCloudVersion = '2021.0.8'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

//apply from: 'liquibase.gradle'
apply plugin: 'net.serenity-bdd.aggregator'


sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  finalizedBy jacocoTestReport
  jacoco {
    destinationFile = file("${project.rootDir}/build/jacoco/test.exec")
  }
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  include "uk/gov/hmcts/reform/notifications/functional/**"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  enableAssertions = true
  scanForTestClasses = true
}

// Serenity Reporting
functional.finalizedBy(aggregate)

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
  testLogging.showStandardStreams = true
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
  checkstyleMain.enabled = false
  checkstyleTest.enabled = false
}


pmd {
  toolVersion = "6.39.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def sonarExclusions = [
  '**/model/**',
  '**/response/**',
  '**/controllers/**',
  '**/mapper/**',
  '**/config/**'
]

sonarqube {
  properties {
    property "sonar.java.coveragePlugin", "jacoco"
    property "sonar.projectName", "Reform :: notifications-service"
    property "sonar.projectKey", "uk.gov.hmcts.reform:notifications-service"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.host.url", "https://sonarcloud.io/"
    property "sonar.dynamicAnalysis", "reuseReports"
    property "sonar.java.coveragePlugin", "jacoco"
    property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
    property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
    property "sonar.exclusions", sonarExclusions.join(", ")
    property "sonar.test.exclusions", sonarExclusions.join(", ")
    property "sonar.coverage.exclusions", sonarExclusions.join(", ")
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

pmdFunctionalTest.enabled(false);

checkstyleFunctionalTest.enabled(false);

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
//  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.68'
    // CVE-2023-3635
    dependencySet(group: 'com.google.guava', version: '32.1.2-jre') {
      entry 'guava'
    }
    dependencySet(group: 'com.squareup.okio', version: '3.5.0') {
      entry 'okio'
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
  maven { url 'https://jitpack.io' }
}


ext {
  reformLoggingVersion = "5.1.9"
}


def versions = [
  junit           : '5.10.0',
  junitPlatform   : '1.10.0',
  reformLogging   : '5.1.7',
  springBoot      : springBoot.class.package.implementationVersion,
  jacocoVersion   : '0.8.5',
  restAssured     : '4.5.1',
  serenity                : '2.6.0',
  serenityreporter        : '2.1.4',
  serenityCucumber        : '1.9.51',
  pitest          : '1.9.0',
  sonarPitest     : '0.5'
]


task fortifyScan(type: JavaExec)  {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

dependencies {

  implementation 'com.sun.xml.bind:jaxb-osgi:4.0.3'
  implementation 'com.github.hmcts:fortify-client:1.2.1:all'
  implementation 'junit:junit:4.13.2'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.6.1'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'

  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.17.3-RELEASE'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.7.0'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-webmvc-core', version: '1.7.0'

  implementation group: 'com.vladmihalcea', name: 'hibernate-types-55', version: '2.21.1'
  //implementation group: 'org.liquibase', name: 'liquibase-core', version: '4.6.2'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.6.0'
  implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: reformLoggingVersion
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: reformLoggingVersion


  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.14.1'
  implementation 'org.projectlombok:lombok:1.18.22'
  //implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '10.1.0'
  //implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '11.2'
  implementation group: 'org.springframework.security', name: 'spring-security-web'
  implementation group: 'org.springframework.security', name: 'spring-security-config'
  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.14'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  implementation group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.5.2.RELEASE'
  implementation group: 'org.springframework.boot', name:'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
  //implementation 'com.github.hmcts:service-auth-provider-java-client:4.0.2'
  //implementation 'com.github.hmcts:idam-java-client:2.0.1'
  implementation 'javax.inject:javax.inject:1'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.4'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.12.4'

  implementation 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  implementation group: 'net.sourceforge.findbugs', name: 'annotations', version: '1.3.2'

  testImplementation(platform('org.junit:junit-bom:5.10.0'))
  testImplementation group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.2'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testImplementation group :'org.projectlombok', name:'lombok', version:'1.18.22'
  testAnnotationProcessor group :'org.projectlombok', name:'lombok', version:'1.18.22'
  testImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.15.1'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: '4.5.1'
  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath
  smokeTestImplementation group :'org.projectlombok', name:'lombok', version:'1.18.22'
  smokeTestAnnotationProcessor group :'org.projectlombok', name:'lombok', version:'1.18.22'

  functionalTestAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
  functionalTestAnnotationProcessor group :'org.projectlombok', name:'lombok', version:'1.18.22'
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-screenplay', version: versions.serenity
  functionalTestImplementation group: 'org.jboss.aerogear', name: 'aerogear-otp-java', version:'1.0.0'
  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath
}

apply from: "${rootDir}/cve-resolution-strategy.gradle"

mainClassName = 'uk.gov.hmcts.reform.notifications.Application'

bootJar {
  archiveFileName = "notifications-service.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'exclude'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

serenity {
  reports = ["single-page-html"]
}

